{"version":3,"sources":["webpack:///./node_modules/vue-recaptcha/dist/vue-recaptcha.es.js"],"names":["__webpack_require__","r","__webpack_exports__","defer","state","callbacks","resolve","val","i","len","length","then","cb","push","deferred","resolved","promise","createRecaptcha","notify","wait","render","ele","options","this","window","grecaptcha","reset","widgetId","assertLoaded","execute","checkRecaptchaLoad","hasOwnProperty","Error","recaptcha","vueRecaptchaApiLoaded","_extends","Object","assign","target","arguments","source","key","prototype","call","VueRecaptcha","name","props","sitekey","type","String","required","theme","badge","size","tabindex","mounted","_this","opts","$props","callback","emitVerify","expired-callback","emitExpired","container","$slots","default","$el","children","id","$widgetId","$emit","methods","response","h"],"mappings":"gHAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAA,WACA,IAAAC,GAAA,EACAC,EAAA,GACAC,EAAA,SAAAC,GACA,IAAAH,EAAA,CAIAA,GAAA,EACA,QAAAI,EAAA,EAAAC,EAAAJ,EAAAK,OAA2CF,EAAAC,EAASD,IACpDH,EAAAG,GAAAD,KAIAI,EAAA,SAAAC,GACAR,EAIAQ,IAHAP,EAAAQ,KAAAD,IAMAE,EAAA,CACAC,SAAA,WACA,OAAAX,GAGAE,UACAU,QAAA,CACAL,SAGA,OAAAG,GAGA,SAAAG,IACA,IAAAH,EAAAX,IAEA,OACAe,OAAA,WACAJ,EAAAR,WAEAa,KAAA,WACA,OAAAL,EAAAE,SAEAI,OAAA,SAAAC,EAAAC,EAAAV,GACAW,KAAAJ,OAAAR,KAAA,WACAC,EAAAY,OAAAC,WAAAL,OAAAC,EAAAC,OAGAI,MAAA,SAAAC,GACA,qBAAAA,IAIAJ,KAAAK,eACAL,KAAAJ,OAAAR,KAAA,WACA,OAAAa,OAAAC,WAAAC,MAAAC,OAGAE,QAAA,SAAAF,GACA,qBAAAA,IAIAJ,KAAAK,eACAL,KAAAJ,OAAAR,KAAA,WACA,OAAAa,OAAAC,WAAAI,QAAAF,OAGAG,mBAAA,WACAN,OAAAO,eAAA,eAAAP,OAAAC,WAAAM,eAAA,WACAR,KAAAL,UAGAU,aAAA,WACA,IAAAd,EAAAC,WACA,UAAAiB,MAAA,mCAMA,IAAAC,EAAAhB,IAEA,qBAAAO,SACAA,OAAAU,sBAAAD,EAAAf,QAGA,IAAAiB,EAAAC,OAAAC,QAAA,SAAAC,GACA,QAAA9B,EAAA,EAAiBA,EAAA+B,UAAA7B,OAAsBF,IAAA,CACvC,IAAAgC,EAAAD,UAAA/B,GAEA,QAAAiC,KAAAD,EACAJ,OAAAM,UAAAX,eAAAY,KAAAH,EAAAC,KACAH,EAAAG,GAAAD,EAAAC,IAKA,OAAAH,GAGAM,EAAA,CACAC,KAAA,eACAC,MAAA,CACAC,QAAA,CACAC,KAAAC,OACAC,UAAA,GAEAC,MAAA,CACAH,KAAAC,QAEAG,MAAA,CACAJ,KAAAC,QAEAD,KAAA,CACAA,KAAAC,QAEAI,KAAA,CACAL,KAAAC,QAEAK,SAAA,CACAN,KAAAC,SAGAM,QAAA,WACA,IAAAC,EAAAjC,KAEAU,EAAAH,qBACA,IAAA2B,EAAAtB,EAAA,GAA0BZ,KAAAmC,OAAA,CAC1BC,SAAApC,KAAAqC,WACAC,mBAAAtC,KAAAuC,cAEAC,EAAAxC,KAAAyC,OAAAC,QAAA1C,KAAA2C,IAAAC,SAAA,GAAA5C,KAAA2C,IACAjC,EAAAb,OAAA2C,EAAAN,EAAA,SAAAW,GACAZ,EAAAa,UAAAD,EACAZ,EAAAc,MAAA,SAAAF,MAIAG,QAAA,CACA7C,MAAA,WACAO,EAAAP,MAAAH,KAAA8C,YAEAxC,QAAA,WACAI,EAAAJ,QAAAN,KAAA8C,YAEAT,WAAA,SAAAY,GACAjD,KAAA+C,MAAA,SAAAE,IAEAV,YAAA,WACAvC,KAAA+C,MAAA,aAGAlD,OAAA,SAAAqD,GACA,OAAAA,EAAA,SAAsBlD,KAAAyC,OAAAC,WAIP/D,EAAA","file":"js/chunk-2d2245be.d4c7f78b.js","sourcesContent":["var defer = function defer() {\n  var state = false; // Resolved or not\n  var callbacks = [];\n  var resolve = function resolve(val) {\n    if (state) {\n      return;\n    }\n\n    state = true;\n    for (var i = 0, len = callbacks.length; i < len; i++) {\n      callbacks[i](val);\n    }\n  };\n\n  var then = function then(cb) {\n    if (!state) {\n      callbacks.push(cb);\n      return;\n    }\n    cb();\n  };\n\n  var deferred = {\n    resolved: function resolved() {\n      return state;\n    },\n\n    resolve: resolve,\n    promise: {\n      then: then\n    }\n  };\n  return deferred;\n};\n\nfunction createRecaptcha() {\n  var deferred = defer();\n\n  return {\n    notify: function notify() {\n      deferred.resolve();\n    },\n    wait: function wait() {\n      return deferred.promise;\n    },\n    render: function render(ele, options, cb) {\n      this.wait().then(function () {\n        cb(window.grecaptcha.render(ele, options));\n      });\n    },\n    reset: function reset(widgetId) {\n      if (typeof widgetId === 'undefined') {\n        return;\n      }\n\n      this.assertLoaded();\n      this.wait().then(function () {\n        return window.grecaptcha.reset(widgetId);\n      });\n    },\n    execute: function execute(widgetId) {\n      if (typeof widgetId === 'undefined') {\n        return;\n      }\n\n      this.assertLoaded();\n      this.wait().then(function () {\n        return window.grecaptcha.execute(widgetId);\n      });\n    },\n    checkRecaptchaLoad: function checkRecaptchaLoad() {\n      if (window.hasOwnProperty('grecaptcha') && window.grecaptcha.hasOwnProperty('render')) {\n        this.notify();\n      }\n    },\n    assertLoaded: function assertLoaded() {\n      if (!deferred.resolved()) {\n        throw new Error('ReCAPTCHA has not been loaded');\n      }\n    }\n  };\n}\n\nvar recaptcha = createRecaptcha();\n\nif (typeof window !== 'undefined') {\n  window.vueRecaptchaApiLoaded = recaptcha.notify;\n}\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar VueRecaptcha = {\n  name: 'VueRecaptcha',\n  props: {\n    sitekey: {\n      type: String,\n      required: true\n    },\n    theme: {\n      type: String\n    },\n    badge: {\n      type: String\n    },\n    type: {\n      type: String\n    },\n    size: {\n      type: String\n    },\n    tabindex: {\n      type: String\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    recaptcha.checkRecaptchaLoad();\n    var opts = _extends({}, this.$props, {\n      callback: this.emitVerify,\n      'expired-callback': this.emitExpired\n    });\n    var container = this.$slots.default ? this.$el.children[0] : this.$el;\n    recaptcha.render(container, opts, function (id) {\n      _this.$widgetId = id;\n      _this.$emit('render', id);\n    });\n  },\n\n  methods: {\n    reset: function reset() {\n      recaptcha.reset(this.$widgetId);\n    },\n    execute: function execute() {\n      recaptcha.execute(this.$widgetId);\n    },\n    emitVerify: function emitVerify(response) {\n      this.$emit('verify', response);\n    },\n    emitExpired: function emitExpired() {\n      this.$emit('expired');\n    }\n  },\n  render: function render(h) {\n    return h('div', {}, this.$slots.default);\n  }\n};\n\nexport default VueRecaptcha;\n"],"sourceRoot":""}